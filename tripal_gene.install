<?php
/**
 * Implements hook_requirements().
 *
 * @ingroup tripal_gene
 */
function tripal_gene_requirements($phase) {
  $requirements = array();
  if ($phase == 'install') {
    // make sure chado is installed
    if (!$GLOBALS["chado_is_installed"]) {
      $requirements ['tripal_gene'] = array(
          'title' => "tripal_gene",
          'value' => "ERROR: Chado must be installed before this module can be enabled",
          'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_install()
 * Allows installation of the tripal_gene module
 */

function tripal_gene_install() {
   // add the materializedviews
   tripal_gene_add_mview();

   // we want to integrate the materialized views so that they
   // are available for Drupal Views, upon which our search forms are built
   tripal_gene_intergrate_view();
  
   $mview_id =  tripal_get_mview_id('gene');   
  
   tripal_populate_mview($mview_id);

}

/**
 * Implementation of hook_uninstall().
 */
function tripal_gene_uninstall() {

  $drop_tbl   = chado_query("DROP TABLE IF EXISTS gene_to_domains");  
  // Drop the MView table if it exists
  $mview_id =  tripal_get_mview_id('gene');
  if ($mview_id) {
    tripal_delete_mview($mview_id);
  }
  //Remove views integration
  // Note: tripal_remove_views_intergration accepts table_name and priority in a key value form. 

  $delete_view=array(
    'table_name' => 'gene',
    'priority' => '-1',
  );
  tripal_remove_views_integration($delete_view); 

}



function tripal_gene_add_mview(){
    $helper_tbl = "gene_to_domains";
    $drop_tbl   = chado_query("DROP TABLE IF EXISTS " . $helper_tbl);
    $create_tbl = chado_query("CREATE TABLE " . $helper_tbl .
    "(gene_id INT NOT NULL, domains TEXT)");

    $create_func = chado_query("
 CREATE OR REPLACE FUNCTION map_gene_to_domains() RETURNS void AS
 'DECLARE
    rec   record;
    nbrow bigint;
 BEGIN
    FOR rec IN
    SELECT f.* from feature f inner join cvterm cvt
    on f.type_id = cvt.cvterm_id where cvt.name = ''gene''
    LOOP
    execute  ''INSERT INTO " . $helper_tbl . " (domains, gene_id) select string_agg(name, E'''' ''''),  '' || rec.feature_id || '' from feature where feature_id IN
    (select feature_id from featureloc where srcfeature_id IN
    (select subject_id from feature_relationship where  object_id IN
    (select subject_id from feature_relationship where object_id= '' || rec.feature_id || '')))'';
    END LOOP;
    RETURN;
 END'
 LANGUAGE 'plpgsql';");
    print "\nPopulating table gene_to_domains with data.....\n";
    $call_func = chado_query("SELECT map_gene_to_domains()");

    // make sure the mview does not reference $helper_tbl while it is still locked: 
    $locked = true;
    while ($locked) {
        sleep(1);
        $locked = chado_query("select granted from pg_locks l, pg_stat_all_tables t where l.relation=t.relid and relname = '" . $helper_tbl . "'")->fetchObject();
    }
    
  //Materialized view addition
  
  $sql_query="select gene1.*, feature.name as coordinates, familyprop.value as gene_family, noteprop.value as description, g2d.domains as domains 
    from
    (select  
       nf.nid as nid,
       F.feature_id as gene_id,
       O.organism_id,             
       Floc.srcfeature_id,
       O.abbreviation,
       O.genus,
       O.species,
       F.name,
       F.uniquename,
       Floc.fmax as stop,
       Floc.fmin as start,
       Floc.strand from feature F,
       featureloc Floc,
       organism O,
       cvterm CVT,
       chado_feature nf,
       cv CV where
       F.feature_id=nf.feature_id and
       F.organism_id=O.organism_id and
       F.feature_id=Floc.feature_id and
       F.type_id=CVT.cvterm_id and
       CVT.name='gene' and
       CVT.cv_id=CV.cv_id and
       CV.name='sequence'    
   ) as gene1
  left join gene_to_domains g2d on 
  g2d.gene_id = gene1.gene_id                        
  inner join feature on            
  feature.feature_id=gene1.srcfeature_id
  left join featureprop noteprop on
  noteprop.feature_id=gene1.gene_id and noteprop.type_id=(select cvterm_id from cvterm t, cv where t.name='Note' and t.cv_id=cv.cv_id and cv.name='feature_property')
  left join featureprop familyprop on familyprop.feature_id=gene1.gene_id and familyprop.type_id=(select cvterm_id from cvterm t, cv where t.name='gene family' and t.cv_id=cv.cv_id and cv.name='LIS_properties')";

    //Table gene description

	$schema = array (
	  'table' => 'gene',
	  'fields' => array (
         'nid' => array(
          'type' => 'int',
          'not null' => FASLE,
         ),
	    'gene_id' => array (
	      'type' => 'int',
	      'not null' => 'FASLE',
	    ),
	    'organism_id' => array (
	      'type' => 'int',
	      'not null' => false,
	    ),
	    'srcfeature_id' => array (
	      'type' => 'int',
	      'not null' => false,
	    ),
	    'abbreviation' => array (
	      'type' => 'text',
	      'not null' => false,
	    ),
	    'genus' => array (
	      'type' => 'text',
	      'not null' => false,
	    ),
	    'species' => array (
	      'type' => 'text',
	      'not null' => false,
	    ),
	    'name' => array (
	      'type' => 'text',
	      'not null' => false,
	    ),
	    'uniquename' => array (
	      'type' => 'text',
	      'not null' => false,
	    ),
	    'stop' => array (
	      'type' => 'int',
	      'not null' => true,
	    ),
	    'start' => array (
	      'type' => 'int',
	      'not null' => true,
	    ),
	    'strand' => array (
	      'type' => 'int',
	      'not null' => true,
	    ),
	    'coordinate' => array (
	      'type' => 'text',
	      'not null' => false,
	    ),
	    'gene_family' => array (
	      'type' => 'text',
	      'not null' => false,
	    ),
	    'description' => array (
	      'type' => 'text',
	      'not null' => false,
	    ),
         'domains' => array (
             'type' => 'text',
             'not null' => false,
         ),
	  ),
	  'primary key' => array (
	    0 => 'gene_id',
	  ),
	  'indexes' => array (
	    'gene_indx0' => array (
	      0 => 'abbreviation',
	    ),
	    'gene_indx2' => array (
	      0 => 'name',
	    ),
	  ),
	);

   // add a comment to make sure this view makes sense to the site administator
  $comment = t('This view is used to provide a table for searching Gene Pages.');
  print "\nCreating gene mview.....\n";
  tripal_add_mview(
    'gene', // name of materialized view
    'tripal_gene', // name of module submitting view
    $schema,      // schema api array representation
    $sql_query,         // sql query that loads the mview
    $comment );
}

/**
 * Integrate the qtl_search materialized view for use by Drupal Views and
 * our search form
 */

function tripal_gene_intergrate_view(){
    $integration = array (
    'table' => 'gene',
    'name' => 'gene',
    'type' => 'chado',
    'description' => '',
    'priority' => '-1',
    'base_table' => '1',
    'fields' => array (
      'nid' => array (
        'name' => 'nid',
        'title' => 'nid',
        'description' => 'Node ID',
        'type' => 'int',
        'handlers' => array (
          'filter' => array (
            'name' => 'views_handler_filter_numeric',
          ),
          'field' => array (
            'name' => 'views_handler_field_numeric',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_numeric',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),     
        'gene_id' => array (
        'name' => 'gene_id',
        'title' => 'gene_id',
        'description' => 'Gene ID',
        'type' => 'int',
        'handlers' => array (
          'filter' => array (
            'name' => 'views_handler_filter_numeric',
          ),
          'field' => array (
            'name' => 'views_handler_field_numeric',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_numeric',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),
       'organism_id' => array (
        'name' => 'organism_id',
        'title' => 'organism_id',
        'description' => 'Organism ID',
        'type' => 'int',
        'handlers' => array (
          'filter' => array (
            'name' => 'views_handler_filter_numeric',
          ),
          'field' => array (
            'name' => 'views_handler_field_numeric',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_numeric',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),

       'srcfeature_id' => array (
        'name' => 'srcfeature_id',
        'title' => 'srcfeature_id',
        'description' => 'srcfeature ID',
        'type' => 'int',
        'handlers' => array (
          'filter' => array (
            'name' => 'views_handler_filter_numeric',
          ),
          'field' => array (
            'name' => 'views_handler_field_numeric',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_numeric',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),

      'abbreviation' => array (
        'name' => 'abbreviation',
        'title' => 'Common Name',
        'description' => 'Common name',
        'type' => 'text',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),

      'name' => array (
        'name' => 'name',
        'title' => 'Name',
        'description' => 'Name',
        'type' => 'text',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),
   
      'uniquename' => array (
        'name' => 'uniquename',
        'title' => 'Uniquename',
        'description' => 'uniquename',
        'type' => 'text',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),

      'coordinate' => array (
        'name' => 'coordinate',
        'title' => 'Coordinate',
        'description' => 'coordinate',
        'type' => 'text',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),
   
      'description' => array (
        'name' => 'description',
        'title' => 'description',
        'description' => 'description',
        'type' => 'text',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),

      'gene_family' => array (
        'name' => 'gene_family',
        'title' => 'gene_family',
        'description' => 'gene_family',
        'type' => 'text',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),

      'stop' => array (
        'name' => 'stop',
        'title' => 'END',
        'description' => 'stop',
        'type' => 'int',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),

        'start' => array (
        'name' => 'start',
        'title' => 'START',
        'description' => 'start',
        'type' => 'int',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),

      'domains' => array (
          'name' => 'domains',
          'title' => 'Domains',
          'description' => 'Domains',
          'type' => 'text',
          'handlers' => array (
              'filter' => array (
                  'name' => 'tripal_views_handler_filter_select_string',
              ),
              'field' => array (
                  'name' => 'views_handler_field',
              ),
              'sort' => array (
                  'name' => 'views_handler_sort',
              ),
              'argument' => array (
                  'name' => 'views_handler_argument_string',
              ),
              'relationship' => array (
                  'name' => 'views_handler_relationship',
              ),
          ),
          'joins' => array (
          ),
       ),

      'strand' => array (
        'name' => 'strand',
        'title' => 'strand',
        'description' => 'strand',
        'type' => 'int',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
          'relationship' => array (
            'name' => 'views_handler_relationship',
          ),
        ),
        'joins' => array (
        ),
      ),
    ), 
  );
// add the array above that will integrate our qtl_search materialized view
  // for use with Drupal Views
  tripal_add_views_integration($integration);

}





